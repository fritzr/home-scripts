#!/bin/bash

: ${RCDIR:=~/.bashrc.d}
export RCDIR

if [[ -d "$HOME/logs" ]]; then
  : ${RCLOG:=$HOME/logs/bashrc.log}
fi

function write_unity() {
  /bin/cat \
    $(/usr/bin/find ${RCDIR:-~/.bashrc.d} -type f -o -type l | /bin/sort) \
    >|"${1:-${HOME}/.bashrc.unity}"
}

function write_unity_shared() {
  local unity="${1:-$HOME/.bashrc.unity}"
  local lockf="${2:-${TMPDIR:-/tmp}/.bashrc.unity.lock}"
  local tmpf="${TMPDIR:-/tmp}/.bashrc.unity.$$"
  (
    /usr/bin/flock -n -x $lockfd || exit $?
    echo $$ >$lockfd
    write_unity "$tmpf" \
      && (
        /bin/mv -f "$tmpf" "$unity"
        /bin/rm -f "$tmpf"
      )
  ) {lockfd}>"$lockf" && /bin/rm -f "$lockf"
}

function make_unity_safe() {
  # Lock the unity file so only one bash tries to write it.
  local unity="${1:-${BASHRC_UNITY:-${HOME}/.bashrc.unity}}"
  local lockf="${2:-${TMPDIR:-/tmp}/.bashrc.unity.lock}"
  if ! write_unity_shared "$unity" "$lockf"; then
    # Someone else has an exclusive lock.
    # Wait for a time until it is released.
    # If we timeout, give up.
    # If we succeed, the lock file might exist; remove it if so.
    /usr/bin/flock -w 1 -s "$lockf"
    /usr/bin/flock -n -x "$lockf" -c "rm -f '$lockf'"
  fi
  if [[ -e "$unity" ]]; then
    return 0
  fi
  echo "warning: timed out waiting for '$unity' ('$lockf' is held)" >&2
  return 1
}


function rcfiles_source() {
  local force unity tstamp opt
  local -f usage

  unset OPTIND
  while builtin getopts futh opt "$@"; do
    case "$opt" in
      f) force=1;;
      u) unity=1;;
      t) tstamp=1;;
      h|?) cat <<EOF >&2
usage: rcfiles_source [-f|-u|-t] [RCDIR}

Source rc files from RCDIR (default from environment).

With -f (force), always source all files recursively.

With -t (timestamp), only source files which have been modified since the last time
they were sourced through this function. Timestamps are stored with pathnames
in a local database when possible -- if not possible, falls back to -f behavior.

With -u (unity), source a unity file which contains all files concatenated together.
The unity file is only generated if it does not exist. Otherwise, the unity file
must be updated manually by calling make_unity_safe. The benefit of the unity file
is primarily to eliminating recursive stat(2) calls incurred by the -t/-f behavior.

By default (with no arguments), use -u.

-f takes priority when specified with -t. Combining -f or -t with -u will cause
the unity file to be regenerated; with -f, the unity file is always regenerated.
With -t, the unity file is regenerated if at least one rcfile was sourced
because it was out of date. Note that combining either option with -u defeats
the main benefit of using the unity file since stat(2) must be called on each
rcfile in either case.

The ideal case is that the unity file is updated externally (i.e. via rced,
make_unity_safe, or write_unity) in which case one can use only -u.
EOF
        return 2;;
    esac
  done

  # By default, update based on timestamps.
  if [[ 0 -eq $force && 0 -eq $unity && 0 -eq $tstamp ]]; then
    unity=1
  fi

  shift $(($OPTIND-1))
  local rcdir="${1:-${RCDIR:-~/.bashrc.d}}"

  # Initialize timestamping when using it with -t.
  local _tstamp_status=1

  if [[ 0 -ne $tstamp ]]; then
    local tstamp_script="$(rcfind -f tstamp 2>>${RCLOG:-/dev/stderr})"
    test -e "$tstamp_script" \
      && . "$tstamp_script" \
      && type -p tstamp_init \
      && tstamp_init \
      && type -p tstamp_update
    if [[ 0 -ne $? ]]; then
      force=1
    fi
  else
    unset RCFILES_SOURCED
  fi

  local status=2

  # Check all for timestamps.
  if [[ 0 -ne $force || 0 -ne $tstamp ]]; then
    local updated=0
    if [[ -d "$rcdir" ]]; then
      for f in $(/bin/find "$rcdir" -type f -o -type l 2>/dev/null | /bin/sort)
      do
        if [[ 0 -ne $force || -z "$RCFILES_SOURCED" ]] || tstamp_update "$f"; then
          if [[ 0 -ne $force ]] && type -p tstamp_update; then
            tstamp_update "$f"
          fi
          echo "`/usr/bin/date +%F.%T.%s`  sourcing '$f'" >>${RCLOG:-/dev/stderr}
          source $f
          local fstatus=$?
          if [[ 0 -ne $fstatus ]]; then
            status=$fstatus
          fi
          updated=1
        fi
      done
      # When combining -f or -t with -u, update the unity file.
      if [[ 0 -eq $status && 0 -ne $unity && 0 -ne $updated ]]; then
        echo "`/usr/bin/date +%F.%T.%s`  " \
          "writing unity rcfile '$BASHRC_UNITY'" \
          >>${RCLOG:-/dev/stderr}
        if ! make_unity_safe 2>>${RCLOG:-/dev/stderr}; then
          echo "`/usr/bin/date +%F.%T.%s`  " \
            "warning: failed to create unity rcfile '$BASHRC_UNITY'" \
            >>${RCLOG:-/dev/stderr}
        fi
      fi
    fi

  # Source the unity file. Generate it if it doesn't exist.
  else # [[ $unity -ne 0 ]]
    if [[ -z "${NO_BASHRC_UNITY}" ]]; then
      : ${BASHRC_UNITY:=~/.bashrc.unity}
      if [[ ! -e "${BASHRC_UNITY}" && -e /usr/bin/flock ]]; then
        echo "`/usr/bin/date +%F.%T.%s`  " \
          "writing unity rcfile '$BASHRC_UNITY'" \
          >>${RCLOG:-/dev/stderr}
        if ! make_unity_safe 2>>${RCLOG:-/dev/stderr}; then
          echo "`/usr/bin/date +%F.%T.%s`  " \
            "warning: failed to create unity rcfile '$BASHRC_UNITY'" \
            >>${RCLOG:-/dev/stderr}
        fi
      fi
      if [[ -e "${BASHRC_UNITY}" ]]; then
        echo "`/usr/bin/date +%F.%T.%s`  sourcing '$BASHRC_UNITY'" \
          >>${RCLOG:-/dev/stderr}
        source "${BASHRC_UNITY}"
        status=$?
      fi
    fi
  fi

  RCFILES_SOURCED=1
  return $status
}

# rcedit <editor-args...>
#
# Edit an rcfile and then update the unity file afterwards.
#
function rcedit() {
  $EDITOR "$@"
  local status=$?
  make_unity_safe
  test $status -eq 0 && $? -eq 0
}

# 1. rced <rcfile name>
# 2. rced -f <command>
#
# With 1, edit an rc file under $RCDIR.
# Filenames are expected to be like [NN_]name[/[MM_]sub_name], where NN and MM
# are digits used to incur an ordering. The argument to rcvi is simply
# name/sub_name in the above example -- the numbers are inferred.
#
# With 2, use `rcfind -l <command>` to locate the file which defines
# <command>  and then edit it.
#
# If *name/*sub_name is given and such a file exists, it is edited.
# If there is no /*sub_name part, then *name is edited if it exists.
# Finally, if *name does not exist, a new file baed on `name` is edited.
# If `name` already starts with digits, `name` is edited as-is.
# Otherwise a default ordering prefix is chosen (30).
#
# "$EDITOR filename" is invoked to edit a file.
# The unity rcfile is recompiled after the editor exits.
function rced() {
  if [[ x"$1" = x"-f" ]]; then
    shift
    local file
    file=$(rcfind -l "$@") || return $?
    rcedit "$file"
    return $?
  fi

  if [[ ! -d "$RCDIR" ]]; then
    echo "${FUNCNAME[0]}: error: no RCDIR" >&2
    return 1
  fi

  if [[ $# -ne 1 ]]; then
    echo "${FUNCNAME[0]}: error: wrong number of arguments $#, expected 1" >&2
    return 1
  fi

  rcfile=$(/usr/bin/env python -S ~/python/rcfind.py edit "$RCDIR" "$@")
  if [[ -n "$rcfile" ]]; then
    rcedit "$rcfile"
  else
    echo "${FUNCNAME[0]}: error: could not find rcfile matching '$@'" >&2
    return 2
  fi
}

# rcfind [-l] <variable, alias, or function>
# rcfind [-l] -f <rcfile>
#
# Find the rcfile(s) under $RCDIR which contains the variable, alias, or
# function definition.
#
# For example, `rcfind -l rcfind` will print the name of this file.
#
# With -f, look for an rcfile by name rather than by command.
# For example, `rcfind -l -f bashrc` will print the name of this file.
#
function rcfind() {
  if [[ ! -d "$RCDIR" ]]; then
    echo "${FUNCNAME[0]}: error: no RCDIR" >&2
    return 1
  fi

  local file=0
  local opt
  unset OPTIND
  while builtin getopts lf opt "$@"; do
    case $opt in
      l) grepopts=-l;;
      f) file=1;;
      ?) return 2;;
    esac
  done

  shift $(($OPTIND-1))
  if [[ $# -ne 1 ]]; then
    echo "${FUNCNAME[0]}: error: wrong number of arguments $#, expected 1" >&2
    return 2
  fi

  local name="$1"

  if [[ 0 -eq $file ]]; then
    grep $grepopts -rIsE \
      -e "($name *\\( *\\) *{|alias +$name\\>|export +$name=|set +$name=)" \
      "$RCDIR"
  else
    find "$RCDIR" -name "*$name" -print -quit
  fi
}

# Reload bashrc
function reload() {
  # Use unity rcfile with timestamps by default; otherwise timestamps only
  if [[ -z "${NO_BASHRC_UNITY}" ]]; then
    rcfiles_source -t -u
  else
    rcfiles_source -t
  fi
}
alias reloadf="rcfiles_source -f"
alias reloadu="rcfiles_source -u"
alias reloadt="rcfiles_source -t"

# vim: set ft=sh:

